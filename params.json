{"name":"Taskcluster-proxy","tagline":"Taskcluster proxy (written in go) for docker-worker","body":"# taskcluster-proxy\r\n<img hspace=\"20\" align=\"left\" src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n[![Build Status](https://travis-ci.org/taskcluster/taskcluster-proxy.svg?branch=master)](http://travis-ci.org/taskcluster/taskcluster-proxy)\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/taskcluster-proxy?status.svg)](https://godoc.org/github.com/taskcluster/taskcluster-proxy)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/taskcluster-proxy/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/taskcluster-proxy?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](http://mozilla.org/MPL/2.0)\r\n\r\ntaskcluster-proxy is the proxy server which is used by TaskCluster workers to\r\nenable individual tasks to talk to various TaskCluster services (auth, queue,\r\nscheduler, ...) without hardcoding credentials into the containers themselves.\r\n\r\nWhen used by docker-worker (main use case) the taskcluster-proxy runs in a\r\nseparate docker container linked to the task docker container. However, there\r\nis no requirement for the taskcluster-proxy to run inside a docker container,\r\nyou can also run it natively. It is written in go (golang) and therefore\r\ncompiles to a native executable (in other words, you do not need to install go\r\n(golang) in order to run it).\r\n\r\n## Download binary release\r\n\r\nSee [releases page](https://github.com/taskcluster/taskcluster-proxy/releases)\r\nand choose a download that matches your platform.\r\n\r\n## Download source and install via `go get`\r\n\r\nAlternatively you can build and install from source:\r\n\r\n```sh\r\ngo get github.com/taskcluster/taskcluster-proxy\r\n```\r\n\r\n## Running\r\n\r\nIf you make source changes, `go install ./...` will rebuild and reinstall `taskcluster-proxy`\r\nin your `GOPATH` for you.\r\n\r\n#### Credentials via Command Line Options\r\n\r\n```\r\n$ \"${GOPATH}/bin/taskcluster-proxy\" --help\r\nTaskcluster authentication proxy. By default this pulls all scopes from a\r\nparticular task but additional scopes may be added by specifying them after the\r\ntask id.\r\n\r\n  Usage:\r\n    taskcluster-proxy [options] <taskId> [<scope>...]\r\n    taskcluster-proxy --help\r\n\r\n  Options:\r\n    -h --help                       Show this help screen.\r\n    --version                       Show the taskcluster-proxy version number.\r\n    -p --port <port>                Port to bind the proxy server to [default: 8080].\r\n    --client-id <clientId>          Use a specific auth.taskcluster hawk client id [default: ].\r\n    --access-token <accessToken>    Use a specific auth.taskcluster hawk access token [default: ].\r\n    --certificate <certificate>     Use a specific auth.taskcluster hawk certificate [default: ].\r\n```\r\n\r\n#### Credentials via Environment Variables\r\n\r\nCredentials may also be passed using environment variables:\r\n\r\n* `TASKCLUSTER_CLIENT_ID`\r\n* `TASKCLUSTER_ACCESS_TOKEN`\r\n* `TASKCLUSTER_CERITIFICATE` (when using temporary credentials)\r\n\r\n**Please do not use these environment variables in production**,\r\ninstead use command line options as described above.\r\n\r\n## Examples\r\n\r\nFor simplicity the below examples run under `localhost`. This is also how\r\ntaskcluster-proxy is used by docker-worker: taskcluster-proxy runs in a linked\r\ncontainer and is accessed from the docker-worker container via a http(s)\r\nconnection (typically https://localhost:60024/).\r\n\r\n```sh\r\n# Start the proxy server; note that 2sz... is the taskId\r\ntaskcluster-proxy 2szAy1JzSr6pyjVCdiTcoQ -p 60024\r\n```\r\n\r\n#### Fetch a task\r\n\r\n```sh\r\ncurl localhost:60024/queue/v1/task/2szAy1JzSr6pyjVCdiTcoQ\r\n```\r\n\r\n#### Create a signed url for the given task (bewit)\r\n\r\nNote: the given taskId below is just an example for demonstration purposes.\r\n\r\n```sh\r\n# Returned url will last one hour\r\ncurl localhost:60024/bewit --data 'https://queue.taskcluster.net/v1/task/2szAy1JzSr6pyjVCdiTcoQ'\r\n```\r\n\r\n## Creating a docker image for the proxy\r\n\r\nThe proxy runs fine natively, but if you wish, you can also create a docker image to run it in.\r\n\r\n```sh\r\n./build.sh user/taskcluster-proxy\r\n```\r\n\r\n\r\n## Running tests\r\n\r\nTo run the full test suites you need taskcluster credentials with at least the\r\nfollowing scopes:\r\n\r\n  * `auth:azure-table-access:fakeaccount/DuMmYtAbLe`\r\n  * `queue:get-artifact:private/build/sources.xml`\r\n\r\nThe credentials are expected to be in the `TASKCLUSTER_CLIENT_ID` and\r\n`TASKCLUSTER_ACCESS_TOKEN` environment variables (and optionally the\r\n`TASKCLUSTER_CERTIFICATE` environment variable if using temporary credentials).\r\n\r\nThen run `go test -v ./...` from the top level source directory.\r\n\r\n## Making a release\r\n\r\nThis process needs to be automated. Just documenting it now as I work it out. =)\r\n\r\n1. Choose an appropriate version number, *X.Y.Z*\r\n2. Update version number in `main.go`\r\n3. `git add main.go; git commit -m \"Bumped version number to X.Y.Z\"`\r\n4. `git tag vX.Y.Z` (note the prefix `v` in the tag name)\r\n5. `git push; git push --tags`\r\n6. Wait for release to magically appear [here](https://github.com/taskcluster/taskcluster-proxy/releases) thanks to travis.\r\n7. Start docker daemon, if not already running (e.g. `boot2docker start`)\r\n8. `./build.sh taskcluster/taskcluster-proxy:X.Y.Z` (no `v` prefix)\r\n9. `./build.sh taskcluster/taskcluster-proxy:latest`\r\n10. `docker push taskcluster/taskcluster-proxy:X.Y.Z` (no `v` prefix in version)\r\n11. `docker push taskcluster/taskcluster-proxy:latest`\r\n12. Confirm releases appear [here](https://hub.docker.com/r/taskcluster/taskcluster-proxy/tags/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}